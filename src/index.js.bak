const cheerio = require('cheerio');
const Future = require('fluture');
const needle = require('needle');
const R = require('ramda');
const S = require('sanctuary');


const AVIBASE_URL = 'http://avibase.bsc-eoc.org/avibase.jsp';
const REQUEST_INTERVAL = 200;


// Cheerio utilities
/////////////////////////////

// parseHTML :: String -> Either CheerioError CheerioRoot
const parseHTML = S.encaseEither(S.I, cheerio.load);

// query :: CheerioRoot -> String -> CheerioElement -> [CheerioElement]
const query = R.curry(($, query, elt) => $(elt).find(query).get());

// text :: CheerioRoot -> CheerioElement -> String
const text = R.curry(($, elt) => $(elt).text());

// attr :: CheerioRoot -> String -> CheerioElement -> String
const attr = R.curry(($, name, elt) => $(elt).attr(name));

// Misc utilities
/////////////////////////////

// run :: [(()->a), (a->b), ... (m->n)] -> n
//
// Takes a list of functions where the first function is nullary. Returns the
// result of executing the functions in a manner similar to pipe except it
// occurs immediately with no initial argument.
const run = fns => R.reduce((x, fn) => fn(x), undefined, fns);

// post :: String -> Object -> Future NeedleError NeedleResponse
//
// Returns a Future for the result of a needle post against the given url with
// the provided body data.
const post = R.curry((url, data) => Future.node(c => needle.post(url, data, c)));

// get :: String -> Error -> Object -> Either Error *
const get = R.curry((name, error, obj) => R.has(name, obj) ? obj[name] : error);

// Parsing
/////////////////////////////

// queryNextPage :: CheerioRoot -> Maybe String
const queryNextPage = $ => run([
  () => $('body').get(),
  query($, 'script'),
  R.map(text($)),
  S.find(R.test(/function nextPage\(\) {/)),
  R.chain(S.match(/f\.startstr\.value="(.+)";/)),
  R.chain(S.last),
  R.unnest,
]);

// queryBirdTable :: CheerioRoot -> [RawBird]
// RawBird :: [CheerioElement, CheerioElement, CheerioElement, CheerioElement]
const queryBirdTable = $ => run([
  () => $('body').get(),
  query($, 'table'),
  R.last,
  query($, 'tr'),
  R.map(query($, 'td')),
  R.tail,
]);

// rawBirdToID :: CheerioRoot -> RawBird -> String
const rawBirdToID = R.curry(($, rawBird) => run([
  () => rawBird,
  R.nth(2),
  query($, 'a'),
  R.head,
  attr($, 'href'),
  R.match(/javascript:changespecies\('([A-F0-9]+)'\)/),
  R.last,
]));

// rawBirdToBird :: CheerioRoot -> RawBird -> Bird
// Bird:: { id       :: String
//        , name     :: String
//        , language :: String
//        , species  :: String
//        , status   :: String }
const rawBirdToBird = R.curry(($, rawBird) => run([
  () => rawBird,
  R.map(text($)),
  R.zip(['name', 'language', 'species', 'status']),
  R.fromPairs,
  R.assoc('id', rawBirdToID($, rawBird)),
]));

// parseSearchPage :: CheerioRoot -> Either Error SearchPage
// SearchPage :: { birds         :: [Either Error Bird]
//               , nextPage      :: Maybe String }
//
// TODO handle query errors
const parseSearchPage = $ => {
  const eitherNextPage = queryNextPage($);
  const eitherRawBirds = run([
    () => queryBirdTable($), // Either Error [RawBird]
    R.map(rawBirdToBird($)), // Either Error [Either Error Bird]
  ]);
  return {
    nextPage: eitherNextPage,
    birds: eitherRawBirds,
  };
};

// Request
/////////////////////////////

// createAvibaseRequestBody :: String -> Object
const createAvibaseRequestBody = startStr => ({
  qstr: ' ',
  qtype: 2,
  qlang: 'EN',
  startstr: startStr,
});

// handleSearchResponse :: NeedleResponse -> Either Error SearchPage
const handleSearchResponse = needleResponse => run([
  () => S.Right(needleResponse),                      // Either Error NeedleResponse
  get('body', Error('badly formed needle response')), // Either Error String
  R.chain(parseHTML),                                 // Either Error CheerioRoot
  R.chain(parseSearchPage),                           // Either Error SearchPage
]);

// fetchSearchPage :: String -> Future NeedleError (Either Error SearchPage)
const fetchSearchPage = nextPage => run([
  () => Future.of(nextPage),                                 // Future NeedleError String
  R.map(createAvibaseRequestBody),                           // Future NeedleError Object
  R.chain(Future.after(REQUEST_INTERVAL)),                   // Future NeedleError Object
  R.chain(post(AVIBASE_URL)),                                // Future NeedleError NeedleResponse
  R.map(handleSearchResponse),                               // Future NeedleError (Either Error SearchPage)
]);

// State
/////////////////////////////

// State :: { allBirds: [Bird]
//          , nextPage: Maybe String }
const State = (allBirds, nextPage) => ({
  allBirds: allBirds,
  nextPage: nextPage,
});

// reduceState :: State -> SearchPage -> State
const reduceState = R.curry((state, searchPage) => State(
  R.concat(state.allBirds, searchPage.birds),
  searchPage.nextPage));


// crawlSearchResults :: State -> Future NeedleError (Either Error State)
const crawlSearchResults = state => run([
  () => Future.of(S.Right(state.nextPage)), // Future NeedleError (Either Error String)
  R.map(R.map(fetchSearchPage)),            // Future NeedleError (Either Error (Future NeedleError (Either Error SearchPage)))
  R.map(R.sequence(Future.of)),             // Future NeedleError (Future NeedleError (Either Error (Either Error SearchPage)))
  R.unnest,                                 // Future NeedleError (Either Error (Either Error SearchPage))
  R.map(R.unnest),                          // Future NeedleError (Either Error SearchPage)
  R.map(R.map(reduceState(state))),         // Future NeedleError (Either Error State)
  R.map(R.map(crawlSearchResults)),         // Future NeedleError (Either Error State)
]);

// TODO ???
// State -> Future NeedleError (Either Error SearchPage)

// Execution
/////////////////////////////

run([
  () => Future.of(State([], S.Just(''))),
  R.chain(crawlSearchResults),
  R.map(R.prop('allBirds')),
  R.map(birds => JSON.stringify(birds, null, '  ')),
]).fork(s => process.stderr.write(s),
        s => process.stdout.write(s));
